/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package spade.storage.kafka;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Edge extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1354983295569119109L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Edge\",\"namespace\":\"spade.storage.kafka\",\"fields\":[{\"name\":\"annotations\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}]},{\"name\":\"childVertexHash\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"parentVertexHash\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"hash\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> annotations;
  @Deprecated public java.lang.String childVertexHash;
  @Deprecated public java.lang.String parentVertexHash;
  @Deprecated public java.lang.String hash;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Edge() {}

  /**
   * All-args constructor.
   * @param annotations The new value for annotations
   * @param childVertexHash The new value for childVertexHash
   * @param parentVertexHash The new value for parentVertexHash
   * @param hash The new value for hash
   */
  public Edge(java.util.Map<java.lang.String,java.lang.String> annotations, java.lang.String childVertexHash, java.lang.String parentVertexHash, java.lang.String hash) {
    this.annotations = annotations;
    this.childVertexHash = childVertexHash;
    this.parentVertexHash = parentVertexHash;
    this.hash = hash;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return annotations;
    case 1: return childVertexHash;
    case 2: return parentVertexHash;
    case 3: return hash;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: annotations = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 1: childVertexHash = (java.lang.String)value$; break;
    case 2: parentVertexHash = (java.lang.String)value$; break;
    case 3: hash = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'annotations' field.
   * @return The value of the 'annotations' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * Sets the value of the 'annotations' field.
   * @param value the value to set.
   */
  public void setAnnotations(java.util.Map<java.lang.String,java.lang.String> value) {
    this.annotations = value;
  }

  /**
   * Gets the value of the 'childVertexHash' field.
   * @return The value of the 'childVertexHash' field.
   */
  public java.lang.String getChildVertexHash() {
    return childVertexHash;
  }

  /**
   * Sets the value of the 'childVertexHash' field.
   * @param value the value to set.
   */
  public void setChildVertexHash(java.lang.String value) {
    this.childVertexHash = value;
  }

  /**
   * Gets the value of the 'parentVertexHash' field.
   * @return The value of the 'parentVertexHash' field.
   */
  public java.lang.String getParentVertexHash() {
    return parentVertexHash;
  }

  /**
   * Sets the value of the 'parentVertexHash' field.
   * @param value the value to set.
   */
  public void setParentVertexHash(java.lang.String value) {
    this.parentVertexHash = value;
  }

  /**
   * Gets the value of the 'hash' field.
   * @return The value of the 'hash' field.
   */
  public java.lang.String getHash() {
    return hash;
  }

  /**
   * Sets the value of the 'hash' field.
   * @param value the value to set.
   */
  public void setHash(java.lang.String value) {
    this.hash = value;
  }

  /**
   * Creates a new Edge RecordBuilder.
   * @return A new Edge RecordBuilder
   */
  public static spade.storage.kafka.Edge.Builder newBuilder() {
    return new spade.storage.kafka.Edge.Builder();
  }

  /**
   * Creates a new Edge RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Edge RecordBuilder
   */
  public static spade.storage.kafka.Edge.Builder newBuilder(spade.storage.kafka.Edge.Builder other) {
    return new spade.storage.kafka.Edge.Builder(other);
  }

  /**
   * Creates a new Edge RecordBuilder by copying an existing Edge instance.
   * @param other The existing instance to copy.
   * @return A new Edge RecordBuilder
   */
  public static spade.storage.kafka.Edge.Builder newBuilder(spade.storage.kafka.Edge other) {
    return new spade.storage.kafka.Edge.Builder(other);
  }

  /**
   * RecordBuilder for Edge instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Edge>
    implements org.apache.avro.data.RecordBuilder<Edge> {

    private java.util.Map<java.lang.String,java.lang.String> annotations;
    private java.lang.String childVertexHash;
    private java.lang.String parentVertexHash;
    private java.lang.String hash;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(spade.storage.kafka.Edge.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.annotations)) {
        this.annotations = data().deepCopy(fields()[0].schema(), other.annotations);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.childVertexHash)) {
        this.childVertexHash = data().deepCopy(fields()[1].schema(), other.childVertexHash);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.parentVertexHash)) {
        this.parentVertexHash = data().deepCopy(fields()[2].schema(), other.parentVertexHash);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hash)) {
        this.hash = data().deepCopy(fields()[3].schema(), other.hash);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Edge instance
     * @param other The existing instance to copy.
     */
    private Builder(spade.storage.kafka.Edge other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.annotations)) {
        this.annotations = data().deepCopy(fields()[0].schema(), other.annotations);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.childVertexHash)) {
        this.childVertexHash = data().deepCopy(fields()[1].schema(), other.childVertexHash);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.parentVertexHash)) {
        this.parentVertexHash = data().deepCopy(fields()[2].schema(), other.parentVertexHash);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hash)) {
        this.hash = data().deepCopy(fields()[3].schema(), other.hash);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'annotations' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getAnnotations() {
      return annotations;
    }

    /**
      * Sets the value of the 'annotations' field.
      * @param value The value of 'annotations'.
      * @return This builder.
      */
    public spade.storage.kafka.Edge.Builder setAnnotations(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[0], value);
      this.annotations = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'annotations' field has been set.
      * @return True if the 'annotations' field has been set, false otherwise.
      */
    public boolean hasAnnotations() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'annotations' field.
      * @return This builder.
      */
    public spade.storage.kafka.Edge.Builder clearAnnotations() {
      annotations = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'childVertexHash' field.
      * @return The value.
      */
    public java.lang.String getChildVertexHash() {
      return childVertexHash;
    }

    /**
      * Sets the value of the 'childVertexHash' field.
      * @param value The value of 'childVertexHash'.
      * @return This builder.
      */
    public spade.storage.kafka.Edge.Builder setChildVertexHash(java.lang.String value) {
      validate(fields()[1], value);
      this.childVertexHash = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'childVertexHash' field has been set.
      * @return True if the 'childVertexHash' field has been set, false otherwise.
      */
    public boolean hasChildVertexHash() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'childVertexHash' field.
      * @return This builder.
      */
    public spade.storage.kafka.Edge.Builder clearChildVertexHash() {
      childVertexHash = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentVertexHash' field.
      * @return The value.
      */
    public java.lang.String getParentVertexHash() {
      return parentVertexHash;
    }

    /**
      * Sets the value of the 'parentVertexHash' field.
      * @param value The value of 'parentVertexHash'.
      * @return This builder.
      */
    public spade.storage.kafka.Edge.Builder setParentVertexHash(java.lang.String value) {
      validate(fields()[2], value);
      this.parentVertexHash = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'parentVertexHash' field has been set.
      * @return True if the 'parentVertexHash' field has been set, false otherwise.
      */
    public boolean hasParentVertexHash() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'parentVertexHash' field.
      * @return This builder.
      */
    public spade.storage.kafka.Edge.Builder clearParentVertexHash() {
      parentVertexHash = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'hash' field.
      * @return The value.
      */
    public java.lang.String getHash() {
      return hash;
    }

    /**
      * Sets the value of the 'hash' field.
      * @param value The value of 'hash'.
      * @return This builder.
      */
    public spade.storage.kafka.Edge.Builder setHash(java.lang.String value) {
      validate(fields()[3], value);
      this.hash = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'hash' field has been set.
      * @return True if the 'hash' field has been set, false otherwise.
      */
    public boolean hasHash() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'hash' field.
      * @return This builder.
      */
    public spade.storage.kafka.Edge.Builder clearHash() {
      hash = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Edge build() {
      try {
        Edge record = new Edge();
        record.annotations = fieldSetFlags()[0] ? this.annotations : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[0]);
        record.childVertexHash = fieldSetFlags()[1] ? this.childVertexHash : (java.lang.String) defaultValue(fields()[1]);
        record.parentVertexHash = fieldSetFlags()[2] ? this.parentVertexHash : (java.lang.String) defaultValue(fields()[2]);
        record.hash = fieldSetFlags()[3] ? this.hash : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
