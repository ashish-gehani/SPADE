#!/bin/bash
#
#  --------------------------------------------------------------------------------
#  SPADE - Support for Provenance Auditing in Distributed Environments.
#  Copyright (C) 2015 SRI International

#  This program is free software: you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.

#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.
#  --------------------------------------------------------------------------------
#
# Hasanat Kazmi <hasanatkazmi@gmail.com>


print_help ()
{
	echo "spade start | stop | debug | control | dig | help"
	echo ""
	echo "'spade start' : Starts SPADE"
	echo "'spade stop' : Stops SPADE after buffers empty"
	echo "'spade kill' : Stops SPADE immediately"
	echo "'spade java-start' : Starts SPADE daemon (java-based)"
	echo "'spade java-stop' : Stops SPADE daemon after buffers empty (java-based)"
	echo "'spade java-kill' : Stops SPADE daemon immediately (java-based)"
	echo "'spade debug' : Starts the SPADE daemon, logs to standard out"
	echo "'spade control' : Starts an interactive SPADE controller"
	echo "'spade query' : Starts an interactive command line SPADE query client"
	echo "'spade help' : Prints this message"
}

SPADE_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )"/../ && pwd )"
CLASSPATH="$SPADE_ROOT/build:$SPADE_ROOT/lib/*"
JAVALIBPATH="$SPADE_ROOT/lib/"
JVMARGS="-server -Xms128M -Xmx512M"
JVMARGSDEBUG="-server -Xms128M -Xmx128M -XX:+UseConcMarkSweepGC"

pushd "${SPADE_ROOT}" > /dev/null

if [ $# -eq 0 ] ; then
	print_help
else
	spadePidFilePath=spade.pid
	if [ $1 = "java-start" ] || [ $1 = "java-stop" ] || [ $1 = "java-kill" ] ; then
		java -Djava.library.path="$JAVALIBPATH" -cp "$CLASSPATH" $JVMARGS spade.utility.Daemonizer "$@"
	elif [ $1 = "query" ] ; then
		java -Djava.library.path="$JAVALIBPATH" -cp "$CLASSPATH" spade.client.CommandLine
	elif [ $1 = "control" ] ; then
		java -Djava.library.path="$JAVALIBPATH" -cp "$CLASSPATH" spade.client.Control
	elif [ $1 = "debug" ] ; then
		java -Djava.library.path="$JAVALIBPATH" -cp "$CLASSPATH" $JVMARGSDEBUG spade.core.Kernel
	elif [ $1 = "start" ] ; then
		running=0
		if [ -f "$spadePidFilePath" ] ; then
			existingSpadePid=`cat $spadePidFilePath`
			if [ -n "$existingSpadePid" ] ; then
				if ps -p "$existingSpadePid" 2>&1 > /dev/null ; then
					running=1
				fi 
			fi
		fi
		if [ "$running" -eq 0 ] ; then
			nohup java -Djava.library.path="$JAVALIBPATH" -cp "$CLASSPATH" $JVMARGS spade.core.Kernel 2>&1 > /dev/null &
			spadePid=$!
			if ps -p "$spadePid" 2>&1 > /dev/null ; then
				echo -n $spadePid > $spadePidFilePath
				echo "Running SPADE with PID = $spadePid"
			else
				echo "Failed to start SPADE"
			fi
		else
			echo "SPADE is already running with PID $existingSpadePid"
		fi
	elif [ $1 = "stop" ] || [ $1 = "kill" ] ; then
		killSignal=
		successMsg=
		failureMsg=
		if [ $1 = "stop" ] ; then
			successMsg="SPADE will stop after buffers clear"
			failureMsg="SPADE process could not be stopped"
			killSignal=15
		else
			# force kill
			successMsg="Stopping SPADE immediately"
			failureMsg="SPADE process could not be killed"
			killSignal=9
		fi
		if [ -f "$spadePidFilePath" ] ; then
			existingSpadePid=`cat $spadePidFilePath`
			if [ -n "$existingSpadePid" ] ; then
				if ps -p "$existingSpadePid" 2>&1 > /dev/null ; then
					kill -$killSignal $existingSpadePid
					killResult=$?
					if [ "$killResult" -eq 0 ] ; then
						echo $successMsg
					else
						echo $failureMsg
					fi
				else
					echo "SPADE is not running, but PID file exists"
				fi
			else
				echo "PID file exists, but empty no pid present"
			fi
		else
			echo "PID file does not exist"
		fi

	else
		print_help
	fi

fi

popd > /dev/null
