#!/bin/bash
#
#  --------------------------------------------------------------------------------
#  SPADE - Support for Provenance Auditing in Distributed Environments.
#  Copyright (C) 2015 SRI International

#  This program is free software: you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.

#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.
#  --------------------------------------------------------------------------------
#
# Hasanat Kazmi <hasanatkazmi@gmail.com>


print_help ()
{
	echo "spade start | stop | status | debug | control | query | help"
	echo ""
	echo "'spade start' : Starts SPADE"
	echo "'spade stop' : Stops SPADE after buffers empty"
	echo "'spade kill' : Stops SPADE immediately"
	#echo "'spade java-start' : Starts SPADE daemon (java-based)"
	#echo "'spade java-stop' : Stops SPADE daemon after buffers empty (java-based)"
	#echo "'spade java-kill' : Stops SPADE daemon immediately (java-based)"
	echo "'spade debug' : Starts the SPADE daemon, logs to standard out"
	echo "'spade control' : Starts an interactive SPADE controller"
	echo "'spade query' : Starts an interactive command line SPADE query client"
	echo "'spade status' : Shows SPADE status"
	echo "'spade help' : Prints this message"
}

spadePidFilePath=spade.pid

is_spade_running(){
	check_by_name=1
	if [ -f "${spadePidFilePath}" ]; then
		spadePid=`cat ${spadePidFilePath}`
		if [ ! -z "$spadePid" ]; then
			ps aux | grep -q "$spadePid" && echo 1 || echo 0
			check_by_name=0
		fi
	fi
	if [ "$check_by_name" -eq 1 ]; then
		ps aux | grep -q "[s]pade.core.Kernel\|[s]pade.core.Unikernel" && echo 1 || echo 0
	fi
}

SPADE_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )"/../ && pwd )"
CYGWIN_JVM_JLINE_ARGS=

if [[ `uname` == *"CYGWIN"* ]]
then
	SPADE_ROOT=`cygpath -w $SPADE_ROOT`
	JAVALIBPATH="$SPADE_ROOT\\lib\\"
	CYGWIN_JVM_JLINE_ARGS="-Djline.terminal=jline.UnixTerminal"
else
	JAVALIBPATH="$SPADE_ROOT/lib/"	
fi

CLASSPATH=$(${SPADE_ROOT}/bin/classpath.sh)

JVMARGS="-server -Xms8G -Xmx16G"
JVMARGSDEBUG="-server -Xms8G -Xmx16G -XX:+UseConcMarkSweepGC"

pushd "${SPADE_ROOT}" > /dev/null

if [ $# -eq 0 ] ; then
	print_help
else
	if [ $1 = "java-start" ] || [ $1 = "java-stop" ] || [ $1 = "java-kill" ] ; then
		java -Djava.library.path="$JAVALIBPATH" -cp "$CLASSPATH" $JVMARGS spade.utility.Daemonizer "$@"
	elif [ $1 = "query" ] ; then
		java -Djava.library.path="$JAVALIBPATH" -cp "$CLASSPATH" $CYGWIN_JVM_JLINE_ARGS spade.client.CommandLine "$@"
	elif [ $1 = "control" ] ; then
		output=$(is_spade_running)
		if [ "$output" -eq 1 ]
		then
			java -Djava.library.path="$JAVALIBPATH" -cp "$CLASSPATH" $CYGWIN_JVM_JLINE_ARGS spade.client.Control
		else
			echo "SPADE is not running"
		fi
	elif [ $1 = "debug" ] ; then
		java -Djava.library.path="$JAVALIBPATH" -cp "$CLASSPATH" $JVMARGSDEBUG spade.core.Kernel
	elif [ $1 = "start" ]  || [ $1 = "remote-debug" ] || [ $1 = "unikernel" ] ; then
		remote_debugging_flags=
		if [ $1 = "remote-debug" ] ; then
			remote_debugging_flags="-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=n"
		fi
		running=0
		if [ -f "$spadePidFilePath" ] ; then
			existingSpadePid=`cat $spadePidFilePath`
			if [ -n "$existingSpadePid" ] ; then
				if ps -p "$existingSpadePid" 2>&1 > /dev/null ; then
					running=1
				fi
			fi
		fi
		mainClassName="spade.core.Kernel"
		if [ $1 = "unikernel" ]; then
			mainClassName="spade.core.Unikernel"
		fi
		if [ "$running" -eq 0 ] ; then
			nohup java $remote_debugging_flags -Djava.library.path="$JAVALIBPATH" -cp "$CLASSPATH" $JVMARGS $mainClassName 2>&1 > /dev/null &
			spadePid=$!
			if [ $1 = "unikernel" ]; then
				sleep 1 # wait for it to try to start up
			fi
			if ps -p "$spadePid" 2>&1 > /dev/null ; then
				echo -n $spadePid > $spadePidFilePath
				echo "Running SPADE with PID = $spadePid"
			else
				echo "Failed to start SPADE"
			fi
		else
			echo "SPADE is already running with PID $existingSpadePid"
		fi
	elif [ $1 = "stop" ] || [ $1 = "kill" ] ; then
		killSignal=
		successMsg=
		failureMsg=
		if [ $1 = "stop" ] ; then
			successMsg="SPADE will stop after buffers clear"
			failureMsg="SPADE process could not be stopped"
			killSignal=15
		else
			# force kill
			successMsg="Stopping SPADE immediately"
			failureMsg="SPADE process could not be killed"
			killSignal=9
		fi
		if [ -f "$spadePidFilePath" ] ; then
			existingSpadePid=`cat $spadePidFilePath`
			if [ -n "$existingSpadePid" ] ; then
				if ps -p "$existingSpadePid" 2>&1 > /dev/null ; then
					kill -$killSignal $existingSpadePid
					killResult=$?
					if [ "$killResult" -eq 0 ] ; then
						echo $successMsg
						rm -f "$spadePidFilePath"
					else
						echo $failureMsg
					fi
				else
					echo "SPADE is not running, but PID file exists"
				fi
			else
				echo "PID file exists, but empty no pid present"
			fi
		else
			echo "PID file does not exist"
		fi

	elif [ $1 = "status" ] ; then
		output=$(is_spade_running)
		if [ "$output" -eq 1 ]
		then
			echo "Running"
		else
			echo "Stopped"
		fi
	elif [ $1 = "run-util" ] || [ $1 = "debug-util" ] ; then
		remote_debugging_flags=
		if [ $1 = "debug-util" ] ; then
			remote_debugging_flags="-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=n"
		fi
		mainClassName="spade.utility.${2}"
		java ${remote_debugging_flags} -Djava.library.path="$JAVALIBPATH" -cp "$CLASSPATH" $JVMARGS $mainClassName "${@:3}"
	else
		print_help
	fi

fi

popd > /dev/null
