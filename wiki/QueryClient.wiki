#sidebar Documentation

=_Querying SPADE_=

*SPADE* supports three classes of queries. These are invoked using the *SPADE* query client which is started with the following command:

{{{
spade-query
}}}

The following will appear:

{{{
SPADE 2.0 Query Client

Available commands:
       <result> = getVertices(expression)
       <result> = getPaths(source vertex id, destination vertex id)
       <result> = getLineage(vertex id, depth, direction)
       <result> = getLineage(vertex id, depth, direction, terminating expression)
       list
       export <result> <path>
       exit

->
}}}
----

===Finding provenance vertices===

The `getVertices()` class of queries finds all the provenance vertices that have specific properties. The properties are framed as a query expression that can be evaluated by the storage system.

----

For example, to query for all vertices that have the annotation `date:02-15-1564` use the following command to evaluate this query and assign the result to `var1`:

{{{
-> var1 = getVertices(date:02-15-1564)
Time taken for query: 158 ms
}}}

In the case of `Neo4j`, the expressions can use the full [http://lucene.apache.org/core/old_versioned_docs/versions/3_5_0/queryparsersyntax.html Lucene query syntax], including wildcards, lexicographic ranges, Boolean operators, fuzzy matching, and proximity searches. 

----

===Retrieving lineage===

The `getLineage()` class of queries is used find the ancestors or descendants of a specific provenance vertex.

 * The third argument is the `vertexId` used by the storage system.
 * The fourth argument is the maximum number of levels of the graph that should be returned. 
 * The fifth argument is either `ancestors` or `descendants` to indicate whether to return the vertices from which the specified one was derived or the vertices which used the specified vertex.
 * The sixth argument is the expression on which the lineage should terminate or `null` if no expression is to be used.
 * The seventh argument is the name of a file in which the response to the query will be stored in [http://www.graphviz.org Graphviz] format.

For example, if the Neo4j database contained *Artifact* vertices with the dates of birth of people and *WasDerivedFrom* edges from children to parents, this query could be used to find Galileo's parents:

{{{
-> query Neo4j lineage 1024 1 ancestors null /tmp/Galileo_parents.dot
}}}

----

===Finding paths between vertices===

The `paths` class of queries lets the user find all paths between two vertices. The third argument is the source vertex identifier and the fourth argument is the destination vertex identifier. The maximum path length is specified in the fifth argument. For example, to find paths from vertex 2 to vertex 5 having a maximum length of 10, the following query could be used:

{{{
-> query Neo4j paths 2 5 10 /tmp/paths.dot
}}}

----

 * [QueryExample An illustration of the use of the query command.]