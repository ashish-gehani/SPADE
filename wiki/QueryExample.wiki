#sidebar Documentation

=_Example illustrating provenance querying_=

The example below illustrates the use of the *SPADE* shell's `query` command.

----

After *SPADE* has been activated (with `make start-spade`), add the `Neo4j` storage and `Pipe` reporter:

{{{
-> add storage Neo4j /tmp/spade_database
Adding storage Neo4j... done

-> add reporter Pipe /tmp/spade_pipe
Adding reporter Pipe... done
}}}

----

To create the provenance metadata needed for the example, add the following vertices and edges:

{{{
echo type:Process id:1 name:root\\ process pid:10 >> /tmp/spade_pipe 
echo type:Process id:2 name:child\\ process pid:32 >> /tmp/spade_pipe 
echo type:WasTriggeredBy from:2 to:1 time:5\\:56\\ PM >> /tmp/spade_pipe 
echo type:Artifact id:3 filename:output.tmp >> /tmp/spade_pipe 
echo type:Artifact id:4 filename:output.o >> /tmp/spade_pipe 
echo type:Used from:2 to:3 iotime:12\\ ms >> /tmp/spade_pipe 
echo type:WasGeneratedBy from:4 to:2 iotime:11\\ ms >> /tmp/spade_pipe 
echo type:WasDerivedFrom from:4 to:3 >> /tmp/spade_pipe 
echo type:Agent id:user uid:10 gid:10 name:john >> /tmp/spade_pipe 
echo type:WasControlledBy from:1 to:user >> /tmp/spade_pipe 
echo type:WasControlledBy from:2 to:user >> /tmp/spade_pipe 
}}}

Note that the *Agent* vertex has a non-numeric `id`. This illustrates that a vertex's `id` key can have any value as long as it is unique.

----

If the `Graphviz` storage had been added, the resulting graph would be:

<p align="center">
http://data-provenance.googlecode.com/svn/trunk/SPADE/doc/images/QueryData.gif
</p>

Note that the [http://eprints.ecs.soton.ac.uk/21449/ Open Provenance Model (OPM)] convention of using octagons for *Agent* vertices, rectangles for *Process* vertices, and ellipses for *Artifact* vertices is followed. In addition, the graph elements are colored with the following semantics:

<p align="center">
|| *Color* || *OPM* meaning ||
|| pink || Agent ||
|| light blue || Process ||
|| yellow || Artifact ||
|| purple || WasControlledBy ||
|| green || Used ||
|| red || WasGeneratedBy ||
|| dark blue || WasTriggeredBy ||
|| orange || WasDerivedFrom ||
</p>

----

The *SPADE* shell's `query` command with the `vertices` option can be used to get a list of all the process vertices:

{{{
-> query Neo4j vertices type:Process
[vertexId:2        type:Process        pid:32        name:child process]
[vertexId:1        type:Process        pid:10        name:root process]
Done
}}}

----

The graph of the provenance of the `root process` (which has a `vertexId` of `1` as can be seen from the above query) can be retrieved with:

{{{
-> query Neo4j lineage 1 10 ancestors /tmp/ancestors.dot
Done
}}}

The second argument (`Neo4j`) is the name of the storage system to query. The fourth argument (`1`) is the vertex. The fifth argument (`10`) is the maximum number of levels of the graph to report. (In this example, there is only one level of ancestry provenance available, though.) The seventh argument is the name of the file in which to store the response to the query.

The file `/tmp/ancestors.dot` is in [http://www.graphviz.org Graphviz] format. When rendered it looks like this:

<p align="center">
http://data-provenance.googlecode.com/svn/trunk/SPADE/doc/images/QueryExampleAncestors.gif
</p>

----

Similarly, the graph in which the same vertex is part of the provenance can be retrieved with:

{{{
-> query Neo4j lineage 1 10 descendants /tmp/descendants.dot
Done
}}}

When rendered, it looks like this:

<p align="center">
http://data-provenance.googlecode.com/svn/trunk/SPADE/doc/images/QueryExampleDescendants.gif
</p>