#labels Featured
----

= SPADE Tutorial =

_need to add text for downloading/compiling/running here_

The following storage classes are already included in SPADE:

    # *Neo4jStorage* - initialization argument is the location of the neo4j database in the filesystem. Example: *`add storage Neo4jStorage /path/to/neo4jdb`*. If a database does not exist at the given path, a new one is created. The path can be absolute or relative.
    # *DOTOutput* - initialization argument is the name of the DOT file. Example: *`add storage DOTOutput testgraph.dot`*. If the given file already exists, it is overwritten. After this storage is removed (or when the kernel is shut down), the file can be used to generate an image of the graph using the Graphviz dot utility. Example: *`dot -Tpng -o graph.png testgraph.dot`* will generate graph.png from testgraph.dot.



== Writing a Producer ==

Producers must belong to the *spade.producers* package and are written by extending the *AbstractProducer* class. Only the following methods need to be overridden:

    * *public boolean launch(String arguments)* - This method is called by the kernel when the producer is launched. The argument is a string that can be used to do any custom configuration. This method must return true to indicate that the producer was launched successfully, otherwise it is not added to the kernel. To send data (vertices and edges) to the kernel, the *putVertex(Vertex)* and *putEdge(Edge)* methods are used which are part of the abstract class.
    * *public boolean shutdown()* - The kernel calls this method when removing a producer. This can be used to perform any necessary cleanup.



== Using the PipeProducer ==

The PipeProducer, included in the SPADE package, works on Mac and Linux by creating a named pipe in the file system to which events can be passed. This makes it easy to send data to SPADE without the need to interface with it directly or to write a producer in java. The name of the pipe is the argument passed when adding this producer to the kernel. Each event is passed to the pipe on a separate line having _*key:value*_ pairs separated by spaces. For vertices, the format is:

*`type:vertexType id:vertexId annotation1:value1 annotation2:value2 ... annotationN:valueN`*

where *`type`* and *`id`* fields are mandatory and _vertexType_ can be of *Process*, *Artifact* or *Agent*. For edges, the format is:

*`type:edgeType from:vertexId to:vertexId annotation1:value1 annotation2:value2 ... annotationN:valueN`*

where *`type`*, *`from`* and *`to`* fields are mandatory and _edgeType_ can be of *Used*, *WasGeneratedBy*, *WasTriggeredBy*, *WasDerivedFrom* or *WasControlledBy*. Any number of annotations can be sent with events. However, the keywords *type*, *id*, *from* and *to* are reserved for use by the producer and cannot be used as annotation keys. Spaces or colons can be used in keys or values by escaping them with a backslash.

== PipeProducer Sample Run ==

The following run of SPADE first adds the DOTOutput storage which will create a DOT file of all data received by the producers. Then the PipeProducer is added and some sample provenance data is passed to the pipe. Finally, the system is shut down and the DOT file created by the DOTOutput storage is used to generate a graphical image.

{{{
[user@localhost SPADE]$ java spade.core.Kernel

SPADE 2.0 Kernel

Available commands:
       add producer|storage <class name> <initialization arguments>
       add filter <class name> <index>
       remove producer|storage <class name>
       remove filter <index>
       list producer|storage|filter
       exit

-> add storage DOTOutput samplegraph.dot
Adding storage DOTOutput... done

-> add producer PipeProducer /tmp/spade_pipe
Adding producer PipeProducer... done
}}}

With the PipeProducer active, events are passed to the named pipe (/tmp/spade_pipe) in a bash shell. Note that spaces and colons in annotations are escaped by two backslashes because the backslash is an escape character in bash as well:

{{{
[user@localhost SPADE]$ echo type:Process id:1 name:root\\ process pid:10 > /tmp/spade_pipe 
[user@localhost SPADE]$ echo type:Process id:2 name:child\\ process pid:32 > /tmp/spade_pipe 
[user@localhost SPADE]$ echo type:WasTriggeredBy from:2 to:1 time:5\\:56\\ PM > /tmp/spade_pipe 
[user@localhost SPADE]$ echo type:Artifact id:3 filename:output.tmp > /tmp/spade_pipe 
[user@localhost SPADE]$ echo type:Artifact id:4 filename:output.o > /tmp/spade_pipe 
[user@localhost SPADE]$ echo type:Used from:2 to:3 iotime:12\\ ms > /tmp/spade_pipe 
[user@localhost SPADE]$ echo type:WasGeneratedBy from:4 to:2 iotime:11\\ ms > /tmp/spade_pipe 
[user@localhost SPADE]$ echo type:WasDerivedFrom from:4 to:3 > /tmp/spade_pipe 
[user@localhost SPADE]$ echo type:Agent id:user uid:10 gid:10 username:SPADE\\ User > /tmp/spade_pipe 
[user@localhost SPADE]$ echo type:WasControlledBy from:1 to:user > /tmp/spade_pipe 
[user@localhost SPADE]$ echo type:WasControlledBy from:2 to:user > /tmp/spade_pipe 
}}}

The SPADE kernel is shut down and an image is generated of the resultant DOT file:

{{{
-> exit
Shutting down producers... done
Flushing buffers... done
Shutting down storages... done
Terminating kernel...

[user@localhost SPADE]$ dot -Tpng samplegraph.dot -o outputimage.png
[user@localhost SPADE]$
}}}

For visual clarity, the DOTOutput storage automatically colors edges according to the edge type and uses different shapes to distinguish between vertex types:

  * `Process` and `Agent` vertices have square edges
  * `Artifact` vertices have rounded edges
  * `Used` edges are green
  * `WasGeneratedBy` edges are red
  * `WasTriggeredBy` edges are blue
  * `WasDerivedFrom` edges are purple
  * `WasControlledBy` edges are orange

The output of the complete sample run above yields the following image (outputimage.png):

<p align="center">
http://data-provenance.googlecode.com/svn/trunk/doc/images/outputimage.png
</p>

----