#labels Featured
----

= SPADE Tutorial =

_need to add text for downloading/compiling/running here_

Consumers:

    # *Neo4jStorage* - initialization argument is the location of the neo4j database in the filesystem. Example: *`add consumer Neo4jStorage /path/to/neo4jdb`*. If a database does not exist at the given path, a new one is created. The path can be absolute or relative.
    # *DOTOutput* - initialization argument is the name of the DOT file. Example: *`add consumer DOTOutput testgraph.dot`*. If the given file already exists, it is overwritten. After this consumer is removed (or when the kernel is shut down), the file can be used to generate an image of the graph using the Graphviz dot utility. Example: *`dot -Tpng -o graph.png testgraph.dot`* will generate graph.png from testgraph.dot.



== Writing a Producer ==

Writing a producer is done by extending the *AbstractProducer* class and must belong to the *spade.producers* package. Only the following methods need to be overridden:

    * *public boolean launch(String arguments)* - This method is called by the kernel when the producer is launched. The argument is a string that can be used to do any custom configuration. This method must return true to indicate that the producer was launched successfully, otherwise it is not added to the kernel. To send data (vertices and edges) to the kernel, the *putVertex(Vertex)* and *putEdge(Edge)* methods are used which are part of the abstract class.
    * *public boolean shutdown()* - The kernel calls this method when removing a producer. This can be used to perform any necessary cleanup.



== SimpleProducer Example ==

The following code illustrates how a very simple producer may be written:

{{{
package spade.producers;

import spade.core.AbstractProducer;
import spade.opm.edge.Edge;
import spade.opm.edge.WasTriggeredBy;
import spade.opm.edge.WasGeneratedBy;
import spade.opm.edge.Used;
import spade.opm.edge.WasDerivedFrom;
import spade.opm.vertex.Artifact;
import spade.opm.vertex.Process;

public class SimpleProducer extends AbstractProducer {

    @Override
    public boolean launch(String arguments) {
        addSomeData();
        return true;
    }

    private void addSomeData() {
        Process root = new Process();
        root.addAnnotation("name", "root process");
        root.addAnnotation("pid", "10");
        putVertex(root);

        Process child = new Process();
        child.addAnnotation("name", "child process");
        child.addAnnotation("pid", "32");
        putVertex(child);

        Edge forkedge = new WasTriggeredBy(child, root);
        forkedge.addAnnotation("time", "5:56 PM");
        putEdge(forkedge);

        Artifact file1 = new Artifact();
        file1.addAnnotation("filename", "output.tmp");
        putVertex(file1);

        Artifact file2 = new Artifact();
        file2.addAnnotation("filename", "output.o");
        putVertex(file2);

        Edge readedge = new Used(child, file1);
        readedge.addAnnotation("iotime", "12 ms");
        putEdge(readedge);

        Edge writeedge = new WasGeneratedBy(file2, child);
        writeedge.addAnnotation("iotime", "11 ms");
        putEdge(writeedge);

        Edge renameedge = new WasDerivedFrom(file2, file1);
        putEdge(renameedge);
    }

    @Override
    public boolean shutdown() {
        return true;
    }

}
}}}

After compiling, the producer can be added in the kernel using this command: *`add producer SimpleProducer null`*. This producer simply passes four vertices to the buffer and creates edges between them. To see the output generated by this producer, the DOTOutput consumer can be used to create an intermediate DOT file from which an image can be generated. Below is a sample run of SPADE using the SimpleProducer:

{{{
SPADE 2.0 Kernel

Available commands:
       add <producer|consumer> <class name> <initialization arguments>
       add filter <class name> <index>
       remove <producer|consumer> <class name>
       remove filter <index>
       list <producers|consumers|filters>
       exit

-> add consumer DOTOutput samplegraph.dot
Adding consumer DOTOutput... done

-> add producer SimpleProducer null
Adding producer SimpleProducer... done

-> exit
Shutting down producers... done
Flushing buffers... done
Shutting down consumers... done
Terminating kernel...

[user@localhost SPADE2]$ dot -Tpng samplegraph.dot -o outputimage.png
[user@localhost SPADE2]$
}}}

The DOTOutput consumer automatically colors edges according to the edge type. The output of the above execution yields the following image (outputimage.png):

<p align="center">
http://data-provenance.googlecode.com/svn/trunk/doc/images/outputimage.png
</p>

----