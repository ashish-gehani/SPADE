#sidebar Documentation

=_Programmatically reporting provenance_=

To create a reporter that sends information programmatically to the *SPADE* kernel, create a class in the `spade.reporter` package that extends the [http://code.google.com/p/data-provenance/source/browse/trunk/SPADE/src/spade/core/AbstractReporter.java spade.core.AbstractReporter] class. For example, to activate a class named `myReporter` in the *SPADE* kernel use:

{{{
-> add reporter myReporter arguments
}}}

This will cause the kernel to invoke the _*spade.reporter.myReporter.launch()*_ method and pass the `arguments` string to it. Note that `myReporter` must be in the `spade.reporter` package and the Java class must be stored in the `SPADE/src/spade/reporter` directory. The kernel will load the `spade.reporter.myReporter` class dynamically when the above command is issued in the *SPADE* shell.

Similarly, the reporter can be deactivated while the kernel is running:

{{{
-> remove reporter myReporter
}}}

The above command will cause the *SPADE* kernel to invoke the _*spade.reporter.myReporter.shutdown()*_ method. It will also be called when the *SPADE* kernel is exiting.

----

===Sending a provenance vertex===

The following steps are used to send a provenance vertex to the *SPADE* kernel:

  * Create an instance of `spade.opm.vertex.Agent`, `spade.opm.vertex.Process`, or `spade.opm.vertex.Artifact`. For example, to create a vertex describing a file use:

{{{
import spade.opm.vertex.Artifact;
Artifact artifact = new Artifact();
}}}

  * Optionally, add key-value pair annotations to the vertex using the _addAnnotation()_ method that the vertex subclass inherited from the `spade.core.AbstractVertex` class:

{{{
artifact.addAnnotation("file name", "/etc/passwd");
artifact.addAnnotation("modification time", "04:20:00 am");
}}}

  * Send the vertex to the kernel using the _putVertex()_ method that the reporter subclass inherited from the `spade.core.AbstractReporter` class:

{{{
putVertex(artifact);
}}}

----

===Sending a provenance edge===

The following steps are used to send a provenance edge to the *SPADE* kernel:

  * Create an instance of `spade.opm.edge.Used`, `spade.opm.edge.WasGeneratedBy`, `spade.opm.edge.WasDerivedFrom`, `spade.opm.edge.WasTriggeredBy`, or `spade.opm.edge.WasControlledBy`. For example, to create an edge describing that a file was read by a process:

{{{
import spade.opm.edge.Used;
Used used = new Used(process, file);
}}}

In the above example, the variable `process` must be an instance of `spade.opm.vertex.Process` and the variable `file` must be an instance of `spade.opm.vertex.Artifact`.

  * Optionally, add key-value pair annotations to the edge using the _addAnnotation()_ method that the edge subclass inherited from the `spade.core.AbstractEdge` class:

{{{
used.addAnnotation("I/O time", "42ms");
}}}

  * Send the edge to the kernel using the _putEdge()_ method that the reporter subclass inherited from the `spade.core.AbstractReporter` class:

{{{
putEdge(artifact);
}}}