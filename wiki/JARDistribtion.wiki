#labels Featured,Phase-Deploy
== SPADE 2.0 JAR Distribution ==

A minimal distribution can now be downloaded for use:
`http://code.google.com/p/data-provenance/source/browse/trunk/distribution/Spade2.zip`

Launching SPADE is simply done by extracting the contents of Spade2.zip and then executing the following command: `java -jar Spade2.jar`

The list of available commands are displayed on startup. The minimal distribution contains no producers but has the following consumers:

    # Neo4jStorage - initialization argument is the location of the neo4j database in the filesystem. Example: `add consumer Neo4jStorage /path/to/neo4jdb`. If a database does not exist at the given path, a new one is created. The path can be absolute or relative.
    # DOTOutput - initialization argument is the name of the DOT file. Example: `add consumer DOTOutput testgraph.dot`. If the given file already exists, it is overwritten. After this consumer is removed (or when the kernel is shut down), the file can be used to generate an image of the graph using the Graphviz dot utility. Example: `dot -Tsvg -o graph.svg testgraph.dot` will generate graph.svg from testgraph.dot which can then be viewed in a browser.



== Writing a Producer ==

To write a custom producer, the following source files are needed which can be downloaded from the repository:

    * ProducerInterface.java
    * Buffer.java
    * Vertex.java
    * Agent.java
    * Artifact.java
    * Process.java
    * Edge.java
    * Used.java
    * WasGeneratedBy.java
    * WasTriggeredBy.java
    * WasDerivedFrom.java
    * WasControlledBy.java

The custom producer must implement the ProducerInterface which has the following methods:

    * *public boolean initialize(Buffer buff, String arguments)* - The kernel calls this method when adding a producer. Each producer is allocated a separate buffer by the kernel which is passed as the first argument of this method. All vertices and edges generated by this producer must be passed to this buffer using the *putVertex* and *putEdge* methods. The second argument is a string that can be used to do any custom configuration. This method must return true to indicate that the producer was successfully initialized, otherwise it is not added to the kernel.
    * *public boolean shutdown()* - The kernel calls this method when removing a producer. This can be used to perform any necessary cleanup.



== SimpleProducer Example ==

The following code illustrates how a very simple producer may be written:

{{{
public class SimpleProducer implements ProducerInterface {

    private Buffer mybuffer;

    public boolean initialize(Buffer buff, String arguments) {
        mybuffer = buff;
        addSomeData();
        return true;
    }

    private void addSomeData() {
        Process root = new Process();
        root.addAnnotation("name", "root node");
        root.addAnnotation("data", "123");
        mybuffer.putVertex(root);

        Process child = new Process();
        child.addAnnotation("name", "child node");
        child.addAnnotation("data", "456");
        mybuffer.putVertex(child);

        Edge edge = new WasTriggeredBy(child, root);
        edge.addAnnotation("time", "5:56 PM");
        mybuffer.putEdge(edge);
    }

    public boolean shutdown() {
        return true;
    }

}
}}}

Once this producer is compiled, the class file must be copied to the directory that contains Spade2.jar. It can then be added in the kernel using the command: add producer SimpleProducer. This producer does not launch any threads but simply passes two vertices to the buffer and creates an edge between them. To see the output generated by this producer, the DOTOutput consumer can be used to generate a DOT file from which an image can be generated. Below is a sample run using the SimpleProducer:

{{{
[user@localhost Spade2]$ java -jar Spade2.jar

SPADE 2.0 Kernel

Available commands:
       add producer <class name>
       add consumer <class name> <initialization argument>
       add filter <class name> <index>
       remove <producer|consumer> <class name>
       remove <filter> <index>
       list <producers|consumers|filters>
       exit

-> add consumer DOTOutput samplegraph.dot
Adding consumer DOTOutput... done

-> add producer FUSEProducer
Adding producer FUSEProducer... done

-> exit
Shutting down producers... done
Flushing buffers... done
Shutting down consumers... done
Terminating kernel...

[user@localhost Spade2]$ dot -Tsvg -o outputimage.svg samplegraph.dot
[user@localhost Spade2]$
}}}