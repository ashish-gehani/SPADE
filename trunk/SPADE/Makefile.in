# SPADE - Support for Provenance Auditing in Distributed Environments.
# Copyright (C) 2011 SRI International.

JAVAC=@JAVAC@
JAVAH=@JAVAH@
CC=@CC@
JAR=@JAR@
JAVAC_CP = build:lib/*

LLVM_PATH = /var/clang+llvm-3.0-x86_64-apple-darwin11
# LLVM_TARGET = nweb

# System and architecture-specific configuration
OS_NAME = $(shell uname)
OS_ARCH = $(shell uname -m)
ifeq ($(OS_NAME), Darwin)
	OS_BUILD = build-openbsm 
	NO_FUSE = $(shell pkg-config fuse; echo $$?)
	ifeq (0, $(NO_FUSE))
		OS_BUILD += build-macfuse
	endif
	OS_CONFIG_PATH = /usr/local/lib/pkgconfig
	REPLIB_OSFLAG = -D_LLVMREPORTER_MACOSX 
	LLVM_RULE = build-mac-llvm
endif
ifeq ($(OS_NAME), Linux)
	OS_BUILD = build-linuxaudit
	NO_FUSE = $(shell pkg-config fuse; echo $$?)
	ifeq (0, $(NO_FUSE))
		OS_BUILD += build-linuxfuse
	endif
	OS_CONFIG_PATH = /usr/lib/pkgconfig
	REPLIB_OSFLAG = -D_LLVMREPORTER_LINUX
	LLVM_RULE = build-linux-llvm
endif
ifneq (, $(findstring CYGWIN, $(OS_NAME)))
	OS_BUILD = build/spade/reporter/ProcMon.class	
	JAVAC_CP = build;lib\*
endif

# -------- Default Build Configuration -----
CORE = AbstractEdge AbstractFilter AbstractReporter AbstractSketch AbstractStorage AbstractVertex \
	BloomFilter Buffer Edge Graph Kernel MatrixFilter Query Vertex Settings
REPORTERS = Graphviz DSL Network LLVM ProcMon
STORAGES = Graphviz Neo4j SQL
CLIENTS = ControlClient QueryClient QueryTool
UTILITIES = JavaHome
FILTERS =  CycleAvoidance Fusion GraphFinesse IORuns LLVMFilter FinalCommitFilter
BUILD_DIRS = build
# -------------------------------------------

.PHONY: build prepare-dirs core reporters filters clients utilities storages

all:	build
	./generatekeys.sh

help:
	@echo 'Usage:'
	@echo '      make                    - to compile the code'
	@echo '      make clean              - to remove the compiled code'
	@echo ' '

# ---------- Building SPADE ----------	
.SECONDEXPANSION:

build: | prepare-dirs 
build: build-java $$(OS_BUILD) lib/spade.jar
build-java: clients utilities storages filters reporters vertex edge

.SUFFIXES : .class .java

prepare-dirs: 
	mkdir -p $(foreach d, $(BUILD_DIRS), $(d) )

build/%.class : src/%.java
	$(JAVAC) -source 1.6 -target 1.6 -Xlint:-options -proc:none -cp '$(JAVAC_CP)' -sourcepath src -d build $<

core: $$(foreach f, $$(CORE), build/spade/core/$$(f).class)
	@echo "--- Built Core ---"
clients: core $$(foreach f, $$(CLIENTS), build/spade/client/$$(f).class) 
	@echo "--- Built Clients ---"
reporters: core $$(foreach f,$$(REPORTERS), build/spade/reporter/$$(f).class ) 
	@echo "--- Built Reporters ---"
storages: core $$(foreach f,$$(STORAGES), build/spade/storage/$$(f).class )
	@echo "--- Built Storages ---"
utilities: core $$(foreach f,$$(UTILITIES), build/spade/utility/$$(f).class )
	@echo "--- Built Utilities ---"
filters: core $$(foreach f,$$(FILTERS), build/spade/filter/$$(f).class )
	@echo "--- Built Filters ---"
edge: core $$(foreach f, Used WasControlledBy WasDerivedFrom WasGeneratedBy WasTriggeredBy , build/spade/edge/opm/$$(f).class )
vertex: core $$(foreach f, Agent  Artifact  Process , build/spade/vertex/opm/$$(f).class ) \
	$$(foreach f, File  Function  Network  Program  Variable  , build/spade/vertex/custom/$$(f).class )

lib/spade.jar: build-java $$(OS_BUILD)
	$(JAR) cvf lib/spade.jar -C build .

# Build the LinuxAudit reporter.
build-linuxaudit: build/spade/reporter/Audit.class lib/spadeLinuxAudit 
	@echo '-----> IMPORTANT: To use the LinuxAudit reporter, please run the following commands to allow SPADE access to the audit stream:'
	@echo '----->            sudo chown root lib/spadeLinuxAudit'
	@echo '----->            sudo chmod ug+s lib/spadeLinuxAudit'
	@echo ''
lib/spadeLinuxAudit: src/spade/reporter/spadeLinuxAudit.c
	gcc -o lib/spadeLinuxAudit src/spade/reporter/spadeLinuxAudit.c

# Build the LinuxFUSE reporter.
build-linuxfuse: src/spade/reporter/libLinuxFUSE.h lib/libLinuxFUSE.so
	@echo ''
	@echo '-----> IMPORTANT: To use the LinuxFUSE reporter, please enable "user_allow_other" in /etc/fuse.conf'
	@echo ''
src/spade/reporter/libLinuxFUSE.h: build/spade/reporter/LinuxFUSE.class
	javah -classpath 'build:lib/*' -o src/spade/reporter/libLinuxFUSE.h spade.reporter.LinuxFUSE
lib/libLinuxFUSE.so: src/spade/reporter/libLinuxFUSE.c utilities
	export PKG_CONFIG_PATH=$(OS_CONFIG_PATH);\
	gcc -fPIC -shared -Wl,-soname,libLinuxFUSE.so -I$(shell java -classpath build spade.utility.JavaHome)/../include -I$(shell java -classpath build spade.utility.JavaHome)/../include/linux -Wall src/spade/reporter/libLinuxFUSE.c `pkg-config fuse --cflags --libs` -o lib/libLinuxFUSE.so

# Build the OpenBSM reporter.
build-openbsm: build/spade/reporter/OpenBSM.class src/spade/reporter/spadeOpenBSM.c lib/spadeOpenBSM
	@echo '-----> IMPORTANT: To use the OpenBSM reporter, please run the following commands to allow SPADE access to the audit stream:'
	@echo '----->            sudo chown root lib/spadeOpenBSM'
	@echo '----->            sudo chmod ug+s lib/spadeOpenBSM'
	@echo ''
lib/spadeOpenBSM: src/spade/reporter/spadeOpenBSM.c
	gcc -o lib/spadeOpenBSM -lbsm src/spade/reporter/spadeOpenBSM.c

# Build the MacFUSE reporter.
build-macfuse: build/spade/reporter/MacFUSE.class src/spade/reporter/MacFUSE.java src/spade/reporter/libMacFUSE.c
	javah -classpath 'build:lib/*' -o src/spade/reporter/libMacFUSE.h spade.reporter.MacFUSE
	gcc -dynamiclib -I/System/Library/Frameworks/JavaVM.framework/Headers src/spade/reporter/libMacFUSE.c `pkg-config fuse --cflags --libs` -o lib/libMacFUSE.jnilib

llvm:
	@make $(LLVM_RULE)

build-mac-llvm:
	$(eval CXX_FLAGS = $(shell $(LLVM_PATH)/bin/llvm-config --cxxflags))
	$(eval C_FLAGS = $(shell $(LLVM_PATH)/bin/llvm-config --cflags))
	$(eval CLANG_FLAGS = -cc1 -triple x86_64-apple-macosx10.6.8 -emit-obj -mrelax-all -disable-free ${C_FLAGS})
	$(eval CLANG++_FLAGS = ${CXX_FLAGS} -m64 -Wl,-flat_namespace -Wl,-undefined,suppress -dynamiclib -mmacosx-version-min=10.6)
	$(LLVM_PATH)/bin/clang ${CLANG_FLAGS} -g -o src/spade/reporter/llvmTracer.o -x c++ src/spade/reporter/llvmTracer.cpp
	$(LLVM_PATH)/bin/clang ${CLANG++_FLAGS} -o lib/llvmTracer.dylib src/spade/reporter/llvmTracer.o
	$(LLVM_PATH)/bin/clang -static ${REPLIB_OSFLAG} src/spade/reporter/llvmBridge.c -c -o src/spade/reporter/llvmBridge.o
	$(LLVM_PATH)/bin/clang -c -emit-llvm ${TARGET}.c -o ${LLVM_TARGET}.bc
	$(LLVM_PATH)/bin/opt -load lib/llvmTracer.dylib -provenance ${LLVM_TARGET}.bc -o ${LLVM_TARGET}.bc
	$(LLVM_PATH)/bin/llc ${LLVM_TARGET}.bc -o ${LLVM_TARGET}.s
	$(LLVM_PATH)/bin/clang src/spade/reporter/llvmClose.c -c -o src/spade/reporter/llvmClose.o
	$(LLVM_PATH)/bin/clang ${LLVM_TARGET}.s src/spade/reporter/llvmClose.o -dynamiclib -Wl,-flat_namespace -Wl,-undefined,suppress -o ${LLVM_TARGET}.dylib
	$(LLVM_PATH)/bin/clang src/spade/reporter/llvmBridge.o ${LLVM_TARGET}.dylib -o ${LLVM_TARGET}

build-linux-llvm:
	$(eval CXX_FLAGS = $(shell $(LLVM_PATH)/bin/llvm-config --cxxflags))
	g++ src/spade/reporter/llvmTracer.cpp -shared -o lib/llvmTracer.so $(CXX_FLAGS)
	gcc -static ${REPLIB_OSFLAG} src/spade/reporter/llvmBridge.c -c -o src/spade/reporter/llvmBridge.o
	$(LLVM_PATH)/bin/clang -c -fPIC -emit-llvm ${LLVM_TARGET}.c -o ${LLVM_TARGET}.bc
	$(LLVM_PATH)/bin/opt -load lib/llvmTracer.so -provenance ${LLVM_TARGET}.bc -o ${LLVM_TARGET}.bc
	$(LLVM_PATH)/bin/llc -relocation-model=pic ${LLVM_TARGET}.bc -o ${LLVM_TARGET}.s
	gcc -fPIC src/spade/reporter/llvmClose.c -c -o src/spade/reporter/llvmClose.o
	gcc ${LLVM_TARGET}.s -c -o ${LLVM_TARGET}.o
	gcc ${LLVM_TARGET}.o src/spade/reporter/llvmClose.o -shared -o ${LLVM_TARGET}.so
	gcc ${LLVM_TARGET}.so src/spade/reporter/llvmBridge.o -o ${LLVM_TARGET}

# ---------- Removing files ----------
# Remove Java classes and native libraries, executables that we compiled.

clean:
	@echo 'Removing Java classes, native libraries, executables...'
	@rm -rf build
	@rm -rf src/spade/reporter/*.h lib/libLinuxFUSE.* lib/libMacFUSE.*
	@rm -rf lib/spade.jar
	@rm -rf lib/spadeOpenBSM lib/spadeLinuxAudit

DESTDIR = @prefix@
install:
	test -d $(DESTDIR) || mkdir $(DESTDIR)
	cp -R bin $(DESTDIR)
	cp -R lib $(DESTDIR)
	cp -R cfg $(DESTDIR)
	cp -R log $(DESTDIR)
	cp -R ssl $(DESTDIR)
